# docker-compose -f docker-compose.dev.yml up --build
version: '3.3'

services:
  web:
    build: ./core
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    env_file:
      - ./core/example.env
    ports:
      - 8000:8000
    depends_on:
      - redis
      - pgbouncer

  celery:
    build: ./core
    command: celery -A backend worker -l info  --autoscale=10,2 -n workerDefault@%h
    volumes:
      - .:/app
    env_file:
      - ./core/example.env
    depends_on:
      - web
      - pgbouncer
      - redis

  celery-beat:
    build: ./core
    command: celery -A backend beat -l info
    volumes:
      - .:/app
    env_file:
      - ./core/example.env
    depends_on:
      - web
      - pgbouncer
      - redis

  flower:
    build: ./core
    command: celery -A backend flower -l info --persistent=True --db=flower
    ports:
      - "5555:5555"
    depends_on:
      - celery-beat
      - celery
      - redis
    volumes:
      - .:/app
      - flowerdata:/data
    env_file:
      - ./core/example.env

  redis:
    restart: always
    image: redis:latest
    ports:
      - "6379:6379"
    depends_on:
      - postgres # hack to ensure postgres is ready by the time django starts
    volumes:
      - redisdata:/data
    env_file:
      - ./core/example.env

  postgres:
    restart: always
    image: postgres:latest
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - pgdata:/var/lib/postgresql/data/
    env_file:
      - ./core/example.env

  pgbouncer:
    image: edoburu/pgbouncer
    environment:
        - DB_USER=postgres
        - DB_PASSWORD=postgres
        - DB_HOST=postgres
        - DB_NAME=postgres
        - POOL_MODE=transaction
        # - ADMIN_USERS=postgres
        - AUTH_TYPE=plain
    ports:
      - "5432:5432"
    depends_on:
      - postgres
    

volumes:
  pgdata:
  redisdata:
  flowerdata:
